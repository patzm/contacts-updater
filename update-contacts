#! /usr/bin/env python3

import argparse
import hashlib
import logging
import os
import re
import sys
from abc import abstractmethod
from typing import List, Optional, Tuple

import AddressBook
import appdirs
import AppKit
import Foundation
import Levenshtein
import requests
from patzm.crawlers import linkedin_utils
from selenium.webdriver.common.by import By

"""Logging"""
app_name = "update-contacts"
log_file_dir = appdirs.user_cache_dir(app_name)
os.makedirs(log_file_dir, exist_ok=True)
logging.basicConfig(filename=os.path.join(log_file_dir, "log.txt"), level=logging.DEBUG)

logger = logging.getLogger(app_name)
logger.setLevel(logging.NOTSET)


def maybe_crop_square_img(file_path: str, image: Foundation.NSImage) -> Foundation.NSImage:
    if image.size().width == image.size().height:
        return image

    aspect_ratio = image.size().width / image.size().height
    if not (0.95 < aspect_ratio < 1.05):
        logger.warning(
            f"The image is not square ({image.size().width}x{image.size().height}). "
            f"Applying center-crop.\n"
            f"Edit {file_path} directly to pick the desired crop."
        )

    square_size = int(min(image.size().width, image.size().height))

    # Calculate the origin of the square
    origin_x = (image.size().width - square_size) / 2
    origin_y = (image.size().height - square_size) / 2

    # Create a new image of the correct size
    square_image = Foundation.NSImage.alloc().initWithSize_(Foundation.NSMakeSize(square_size, square_size))

    # Draw the portion of the original image that we want into the new image
    square_image.lockFocus()
    image.drawInRect_fromRect_operation_fraction_(
        Foundation.NSMakeRect(0, 0, square_size, square_size),  # Destination rectangle
        Foundation.NSMakeRect(origin_x, origin_y, square_size, square_size),  # Source rectangle
        AppKit.NSCompositingOperationSourceOver,
        1.0,
    )
    square_image.unlockFocus()
    return square_image


def read_img(file_path: str) -> Foundation.NSImage:
    image = Foundation.NSImage.alloc().initWithContentsOfFile_(file_path)
    assert image.isValid(), f"Loaded invalid image file {file_path}"
    return image


def scale_crop_img(file_path: str, image: Foundation.NSImage) -> Foundation.NSImage:
    image = maybe_crop_square_img(file_path, image)

    target_size = 256
    scaled_size = Foundation.NSMakeSize(target_size, target_size)
    if image.size() > scaled_size:
        image = resize_image(image, scaled_size)

    return image


def resize_image(image: Foundation.NSImage, new_size: Foundation.CGSize) -> Foundation.NSImage:
    bitmap_rep = Foundation.NSBitmapImageRep.alloc().initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bitmapFormat_bytesPerRow_bitsPerPixel_(
        None, new_size.width, new_size.height, 8, 4, True, False, AppKit.NSCalibratedRGBColorSpace, 0, 0, 0
    )

    if bitmap_rep is None:
        return None

    bitmap_rep.setSize_(new_size)
    Foundation.NSGraphicsContext.saveGraphicsState()
    Foundation.NSGraphicsContext.setCurrentContext_(
        Foundation.NSGraphicsContext.graphicsContextWithBitmapImageRep_(bitmap_rep)
    )

    # Assuming self is an NSImage, draw the image into the context
    image.drawInRect_fromRect_operation_fraction_(
        Foundation.NSMakeRect(0, 0, new_size.width, new_size.height),
        Foundation.NSMakeRect(0, 0, image.size().width, image.size().height),
        AppKit.NSCompositeCopy,
        1.0,
    )
    Foundation.NSGraphicsContext.restoreGraphicsState()

    resized_image = Foundation.NSImage.alloc().initWithSize_(new_size)
    resized_image.addRepresentation_(bitmap_rep)
    return resized_image


def write_img(image: Foundation.NSImage, file_path: str, file_format: int):
    image.lockFocus()
    rect = Foundation.NSMakeRect(0.0, 0.0, image.size().width, image.size().height)
    img_rep = AppKit.NSBitmapImageRep.alloc().initWithFocusedViewRect_(rect)
    image.unlockFocus()

    data = img_rep.representationUsingType_properties_(file_format, None)  # no compression
    data.writeToFile_atomically_(file_path, False)


def person_get_name(person: AddressBook.ABPerson) -> Tuple[str, str]:
    first_name = person.valueForProperty_(AddressBook.kABFirstNameProperty) or ""
    last_name = person.valueForProperty_(AddressBook.kABLastNameProperty) or ""
    return first_name, last_name


class Provider:
    @abstractmethod
    def get_image(self, file_name: str, person: AddressBook.ABPerson) -> bool:
        ...


class GravatarProvider(Provider):
    def get_image(self, file_name: str, person: AddressBook.ABPerson) -> bool:
        email_store = person.valueForProperty_(AddressBook.kABEmailProperty)
        n_emails = AddressBook.ABMultiValueCount(email_store)
        emails = [
            AddressBook.ABMultiValueCopyValueAtIndex(email_store, idx).encode().decode() for idx in range(n_emails)
        ]

        for email in emails:
            email_hash = hashlib.md5(email.lower().strip().encode()).hexdigest()
            url = f"https://www.gravatar.com/avatar/{email_hash}.jpg?d=404&s=500"
            logger.info(f"\t- e-mail: {email}\n\t  request: {url}")
            picture_request = requests.get(url, allow_redirects=True)
            if picture_request.status_code != 404:
                with open(file_name, "wb") as picture_file:
                    picture_file.write(picture_request.content)
                return True

        return False


class LinkedInProvider(linkedin_utils.LinkedInProvider, Provider):
    def __init__(self, config_dir: str, cache_dir: str):
        super().__init__(config_dir=config_dir, cache_dir=cache_dir)

        self._img_classes = {
            "pv-non-self-member-photo-modal__image",
            "pv-top-card-profile-picture__image",
        }
        self._username_pattern = re.compile(r"https://www\.linkedin\.com/in/([^/]+)/?")

    def get_social(self, person: AddressBook.ABPerson) -> Optional[str]:
        social_services = person.valueForProperty_(AddressBook.kABSocialProfileProperty)
        if not social_services:
            return None

        for social_service in social_services._allValues():
            if (
                social_service.get(AddressBook.kABSocialProfileServiceKey)
                == AddressBook.kABSocialProfileServiceLinkedIn
            ):
                url = social_service.get(AddressBook.kABSocialProfileURLKey)
                username = social_service.get(AddressBook.kABSocialProfileUsernameKey)
                if url and not username:
                    social_service[AddressBook.kABSocialProfileUsernameKey] = self.get_username_from_url(url)
                    person.setValue_forProperty_(social_services, AddressBook.kABSocialProfileProperty)
                elif username and not url:
                    social_service[AddressBook.kABSocialProfileURLKey] = f"https://www.linkedin.com/in/{username}/"
                    person.setValue_forProperty_(social_services, AddressBook.kABSocialProfileProperty)
                elif not username and not url:
                    first_name, last_name = person_get_name(person)
                    raise ValueError(
                        f"{first_name} {last_name}: Either username or url should have been populated, found none."
                    )

                return url

        return None

    def set_social(self, person: AddressBook.ABPerson, url: str):
        username = self.get_username_from_url(url)
        linkedin_profile = Foundation.NSDictionary.dictionaryWithDictionary_(
            {
                AddressBook.kABSocialProfileServiceKey: AddressBook.kABSocialProfileServiceLinkedIn,
                AddressBook.kABSocialProfileUsernameKey: username,
                AddressBook.kABSocialProfileURLKey: url,
            }
        )

        social_profiles = person.valueForProperty_(AddressBook.kABSocialProfileProperty)
        if social_profiles:
            social_profiles = social_profiles.mutableCopy()
        else:
            social_profiles = AddressBook.ABMutableMultiValue.alloc().init()
        social_profiles.addValue_withLabel_(linkedin_profile, AddressBook.kABSocialProfileServiceLinkedIn)

        person.setValue_forProperty_(social_profiles, AddressBook.kABSocialProfileProperty)

    def search_profile(self, person: AddressBook.ABPerson) -> Optional[str]:
        social = self.get_social(person)
        if social:
            return social

        first_name, last_name = person_get_name(person)
        if not last_name or not first_name:
            return None

        name = f"{first_name} {last_name}"
        url = (
            f"https://www.linkedin.com/search/results/people/?"
            f"keywords={name}"
            f'&network=["F"]'
            f"&origin=SPELL_CHECK_REPLACE"
            f"&sid=(ol&spellCorrectionEnabled=false"
        )
        self.driver.get(url)
        results = self.driver.find_elements(by=By.CLASS_NAME, value="entity-result")
        if len(results) == 0:
            return None

        # navigate to the first search result
        first_result_link = results[0].find_element(by=By.TAG_NAME, value="a")
        first_result_link.click()
        self.wait_for(by=By.ID, value="profile-content")

        # Validate name
        heading_elements = self.driver.find_elements(by=By.TAG_NAME, value="h1")
        match = False
        for he in heading_elements:
            if "text-heading-xlarge" in he.get_attribute("class"):
                if Levenshtein.ratio(he.text, name, score_cutoff=0.6):
                    match = True
                    break

        if not match:
            return None

        profile_url = self.driver.current_url
        self.set_social(person, profile_url)
        return profile_url

    def get_image(self, file_name: str, person: AddressBook.ABPerson) -> bool:
        first_name, last_name = person_get_name(person)
        name = f"{first_name} {last_name}"

        profile_url = self.search_profile(person)
        if not profile_url:
            return False

        if self.driver.current_url != profile_url:
            self.driver.get(profile_url)
        if "overlay/profile-video" in profile_url:
            # This user's profile shows a video
            classes = " ".join(
                (
                    "artdeco-dropdown__trigger",
                    "artdeco-dropdown__trigger--placement-bottom",
                    "ember-view",
                    "artdeco-button",
                    "artdeco-button--2",
                    "artdeco-button--circle",
                    "artdeco-button--inverse",
                    "artdeco-button--tertiary",
                )
            )
            context_menu_button = self.driver.find_element(By.XPATH, f'//button[@class="{classes}"]')
            context_menu_button.click()
            view_profile_photo_element = self.driver.find_element(By.CLASS_NAME, "view-profile-photo-trigger")
            view_profile_photo_element.click()

        else:
            profile_picture_button = self.driver.find_element(
                by=By.CLASS_NAME, value="pv-top-card__non-self-photo-wrapper"
            )
            profile_picture_button.click()

        self.driver.implicitly_wait(3)
        picture_element = None
        picture_elements = self.driver.find_elements(by=By.TAG_NAME, value="img")
        for pe in picture_elements:
            if any(img_cls in pe.get_attribute("class") for img_cls in self._img_classes):
                picture_element = pe
                break

        if picture_element is None:
            logger.warning(f"{name}: failed to find the picture node.")
            return False

        picture_source = picture_element.get_attribute("src")
        logging.debug(f"{name}: picture url found {picture_source}")
        if "https://" not in picture_source:
            logging.debug(f"{name}: doesn't have a profile picture, skipping.")
            return False

        picture = requests.get(picture_source, allow_redirects=True)
        if picture.status_code == 200:
            with open(file_name, "wb") as picture_file:
                picture_file.write(picture.content)
            return True

        return False


def find_picture_for_person(person: AddressBook.ABPerson, file_path: str, providers: List[Provider]) -> bool:
    first_name, last_name = person_get_name(person)
    name = f"{first_name} {last_name}"

    image_data = person.imageData()
    if image_data:
        logger.info(f"{name}: already has a profile picture.")
        image = Foundation.NSImage.alloc().initWithData_(image_data)
        write_img(image, file_path, AppKit.NSJPEGFileType)
        return False

    if os.path.exists(file_path):
        logger.info(f"{name}: A profile picture has already been downloaded.")
        return True

    logger.info(f"{name}: Getting a profile picture.")
    success = False
    for provider in providers:
        success = provider.get_image(file_name=file_path, person=person)
        if success:
            break

    if success:
        logger.info(f"{name}: Successfully found a profile picture.")
    else:
        logger.warning(f"{name}: Failed to find a profile picture.")

    return success


def apply_picture_for_person(person: AddressBook.ABPerson, file_path: str) -> bool:
    image = read_img(file_path)
    scaled_image = scale_crop_img(file_path, image)
    tiff_data = scaled_image.TIFFRepresentation()
    bitmap_image = AppKit.NSBitmapImageRep.alloc().initWithData_(tiff_data)
    jpeg_data = bitmap_image.representationUsingType_properties_(
        AppKit.NSJPEGFileType, {AppKit.NSImageCompressionFactor: 0.7}
    )
    return person.setImageData_(jpeg_data)


def main(config: argparse.Namespace):
    output_path = os.path.join(appdirs.user_cache_dir(app_name), "profile-pictures")
    os.makedirs(output_path, exist_ok=True)

    config_dir = appdirs.user_config_dir(appname="update-contacts")
    os.makedirs(config_dir, exist_ok=True)

    providers = []
    if not getattr(config.providers, "no_linkedin", False):
        providers.append(LinkedInProvider(config_dir=config_dir, cache_dir=output_path))
    if not getattr(config.providers, "no_gravatar", False):
        providers.append(GravatarProvider())

    book = AddressBook.ABAddressBook.sharedAddressBook()
    for person in book.people():
        first_name, last_name = person_get_name(person)
        name = f"{first_name} {last_name}"
        file_path = os.path.join(output_path, f"{first_name.lower()}_{last_name.lower()}.jpg")

        should_update = find_picture_for_person(person, file_path, providers)
        if not should_update:
            book.save()
            continue

        success = apply_picture_for_person(person, file_path)
        if success:
            logger.info(f"{name}: New profile picture updated successfully.")
            book.save()
        else:
            logger.warning(f"{name}: Failed updating the profile picture.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(app_name)

    subparsers = parser.add_subparsers(dest="providers")
    providers_parser = subparsers.add_parser("providers")
    providers_parser.add_argument(
        "--no-gravatar",
        default=False,
        action="store_true",
        help="Disable the Gravatar provider.",
    )
    providers_parser.add_argument(
        "--no-linkedin",
        default=False,
        action="store_true",
        help="Disable the LinkedIn provider.",
    )

    args = parser.parse_args()

    stdout_handler = logging.StreamHandler(sys.stdout)
    stdout_handler.setLevel(logging.INFO)
    logger.addHandler(stdout_handler)

    main(config=args)
